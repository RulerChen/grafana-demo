// Tracing

// The OpenTelemetry receiver is used to ingest all incoming trace spans. A label 'otlp_receiver' is added to uniquely
// identify this instance.
// Note that both the instrumented application *and* Beyla use the same receiver to send traces.
otelcol.receiver.otlp "otlp_receiver" {
    // We don't technically need this, but it shows how to change listen address and incoming port.
    // In this case, the Alloy is listening on all available bindable addresses on port 4317 (which is the
    // default OTLP gRPC port) and port 4318 (which is the OTLP HTTP port) for the OTLP protocol.
    grpc {
        endpoint = "0.0.0.0:4317"
    }
    http {
        endpoint = "0.0.0.0:4318"
    }
    // We define where to send the output of all ingested traces. In this case, to the OpenTelemetry batch processor
    // named 'default'.
    output {
        traces = [
            // Uncomment the next line to generate service graph metrics from the Alloy. By default this is generated
            // by the Tempo component, so be sure to remove the relevant configuration in the `tempo/tempo.yaml` file.
            // otelcol.connector.servicegraph.tracemetrics.input,
            // Uncomment the next line to generate span metrics from the Alloy. By default this is generated
            // by the Tempo component, so be sure to remove the relevant configuration in the `tempo/tempo.yaml` file.
            //otelcol.connector.spanmetrics.tracemetrics.input,
            // The following would be used for tail sampling only traces containing errors.
            // Uncomment the following line, then comment out the line below it (the batch processor) to use
            // tail sampling.
            //otelcol.processor.tail_sampling.errors.input,
            otelcol.processor.batch.default.input,
            // otelcol.connector.spanlogs.autologging.input,
        ]
        // Route any incoming OTLP metrics directly to the batch processor.
        // metrics = [
        //     otelcol.processor.batch.default.input,
        // ]
    }
}

// The OpenTelemetry batch processor collects trace spans until a batch size or timeout is met, before sending those
// spans onto another target. This processor is labeled 'default'.
otelcol.processor.batch "default" {
    // Wait until we've received 1000 samples, up to a maximum of 2000.
    send_batch_size = 1000
    send_batch_max_size = 2000
    // Or until 2 seconds have elapsed.
    timeout = "2s"
    // When the Alloy has enough batched data, send it to the OpenTelemetry exporter named 'tempo' for traces,
    // or the Prometheus exporter for metrics.
    output {
        traces = [otelcol.exporter.otlp.tempo.input]
        // metrics = [otelcol.exporter.prometheus.tracemetrics.input]
    }
}

// The OpenTelemetry exporter exports processed trace spans to another target that is listening for OTLP format traces.
// A unique label, 'tempo', is added to uniquely identify this exporter.
otelcol.exporter.otlp "tempo" {
    // Define the client for exporting.
    client {
        // Authentication block.
        auth = otelcol.auth.headers.tempo.handler

        // Send to the locally running Tempo instance, on port 4317 (OTLP gRPC).
        endpoint = "http://tempo:4317"

        // Configure TLS settings for communicating with the endpoint.
        tls {
            // The connection is insecure.
            insecure = true
            // Do not verify TLS certificates when connecting.
            insecure_skip_verify = true
        }
    }
}

// The OpenTelemetry auth headers component is used to define the headers for the OTLP exporter. Note we don't
// use basic auth here because the OTel spec. demands TLS enabled for basic auth. Using basic header auth
// allow us to still wire up the basic auth credentials to the Tempo exporter even when they won't be required.
otelcol.auth.headers "tempo" {
    header {
        key = "Authorization"
        value = "Basic "
    }
}
